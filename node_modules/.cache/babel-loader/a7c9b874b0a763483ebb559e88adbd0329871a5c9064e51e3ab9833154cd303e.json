{"ast":null,"code":"var _jsxFileName = \"/Users/innaglamazda/Documents/Inna/Education/Front-End/canshecode/React_JS/module-13-Final project-menu_planner/menu_planner_app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport './App.css';\nimport MyList from './MyList';\nimport MyMealsAndIngridients from './MyMealsAndIngridients';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // STEP 32\n  // Прописываем часть шага localStorage в useState\n  //И если у нас что то имеется в mealPlans не пустой массив то делаем JSON.parse\n  // В противном случае у нас будет пустой массив\n\n  // STEP 7 \n  //  Нам нужно прописать состояние и прированием его к useState это у нас будет массив\n  const [mealPlans, setMealPlans] = useState(localStorage.mealPlans ? JSON.parse(localStorage.mealPlans) : []);\n\n  // STEP 16\n  // Мы должны сделать ращницу между заметкой на котору мы нажали и при этом открывалась под нее форма\n  // которую мы можем редактировать\n  // Нам нужно новое состояние и приравниваем это к useState(false)\n  //Потому что мы хотим чтобы наша заметка изначально не была выбрана\n  const [selectedDay, setSelectedDay] = useState(false);\n\n  //   STEP 31\n  // Нам нужно научиться сохранять информацию через localStorage потому что нет бекенда\n  // Нам понадобиться useEffect\n  // И  унас будет такая логика что localStorage.setItem(это всегда исапользуется с localStorage)\n  // Мы говорим что мы хотим обращать внимание именно на то меняется mealPlans or not\n  // И мы хотим показывать в определенном формате JSON.stringify\n  // То есть мы не только сохраняем мы отображаем информацию в определенном формате иначе не будет работать\n  // И после этого должны привязать к mealPlans\n  // Структоруа с использования localStorage всегда одна\n  useEffect(() => {\n    localStorage.setItem(\"mealPlans\", JSON.stringify(mealPlans));\n  }, [mealPlans]);\n\n  // STEP 6\n  // Задефайним addMeal\n  //И потом передаь этот пропс ребенку MyList\n\n  const addMeal = () => {\n    // STEP 8 \n    // Создаем обьект newMeal потому что у нас у каждой заметки по меню будут определенны характеристики\n    // например: title and etc.\n    const newMeal = {\n      title: \"Monday meal\",\n      //STEP 12\n      // Нам нужно удалять каждый день из списка не все сразу,  идля этого нам нужно знать ID\n      // Но мы не можем прописывать ID (1, 2, 3, 4) \n      //Но у нас у каждого эдемента будет свой айди\n      // поэтому часто используют библиотеку uuid https://www.npmjs.com/package/uuid\n      // для установки: npm i uuid\n      // функция: uuid();\n      // импортировать:import { v4 as uuid } from 'uuid';\n      //Для этого мы будем просто писать id: uuid() то есть вызывать эту функцию\n      id: uuid(),\n      mealForADay: \"\",\n      notes: \"\"\n    };\n\n    // STEP 9\n    // Мы должны передать этот обьект в новый компонент\n    // Но прежде чем передать вновый компонент мы должны прописать логику поменять состояние\n    // Что как только у нас будет нажата кнопка ADD мы меняем состояние\n    // Берем setMealPlans, создаем новый массив это юудет у нас newMeal\n    // Мы говорим добавь нам сюда нашу новую заметку и также покажи мне не убирай со страницы а добавь в общий массив все остальное\n    // Для этого испольщуем опиратор расширения\n    //Нам нужно чтобы при нажатии мы видели что мы добавили видели текст\n    //Нам нужно всю эту логику передать в компонент MyList\n    setMealPlans([newMeal, ...mealPlans]);\n    console.log(newMeal);\n  };\n\n  // STEP 14\n  // Прописываем функцию\n  // Указываем параметр mealID\n  const deleteDay = mealId => {\n    //   Мы говорим что мы хотим поменять наше состояние через setMealPlans и использунм filter() method\n    //   Мы используем ID чтобы сравнивать ID с тем ID на который мы нажали и если он не одинаковый \n    //   ID удаляется то есть не попападает в новый массив который был создан через filter\n    setMealPlans(mealPlans.filter(({\n      id\n    }) => id !== mealId));\n  };\n\n  // SETP 21\n  // Создаем новую const\n  const updatedDay = myUpdatedMeal => {\n    // Создаем новую const и это у нас будет новый массив\n    // Мы возьмем все наши заметки то есть mealPlans сделаем на нем метод Map()\n    const myUpdatedMeals = mealPlans.map(mealPlan => {\n      // и мы будем смотреть чтобы id нашего mealPlan был таким же как id вот этой формы что у нас открыта\n      // и если они у нас абсолютно одинаковы то return myUpdatedMeal\n      // Если же нет то тогда покажи нам просто mealPlan\n      if (mealPlan.id === myUpdatedMeal.id) {\n        return myUpdatedMeal;\n      }\n      return mealPlan;\n    });\n\n    // STEP 22\n    // мы должны прописать setMealPlans и сказать что если если будут какие то изминение\n    // то нужно все менять и принимать во внимание\n    setMealPlans(myUpdatedMeals);\n  };\n\n  // STEP 27\n  // Создаем функцию которая будет проверять ID нашей заметки(формы) и ID того дня который выбран\n  // Испольщуем метод find() и мы будем искать по ID\n  // И помимо этого мы напишем что id нашей формы должен быть равен selectedDay\n  const getActiveMeal = () => {\n    return mealPlans.find(({\n      id\n    }) => id === selectedDay);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MyList, {\n      mealPlans: mealPlans,\n      addMeal: addMeal,\n      deleteDay: deleteDay,\n      selectedDay: selectedDay,\n      setSelectedDay: setSelectedDay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyMealsAndIngridients, {\n      selectedDay: getActiveMeal(),\n      updatedDay: updatedDay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MBn5GFjJ38ETMgEeWU1d9ilh85c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","v4","uuid","MyList","MyMealsAndIngridients","jsxDEV","_jsxDEV","App","_s","mealPlans","setMealPlans","localStorage","JSON","parse","selectedDay","setSelectedDay","setItem","stringify","addMeal","newMeal","title","id","mealForADay","notes","console","log","deleteDay","mealId","filter","updatedDay","myUpdatedMeal","myUpdatedMeals","map","mealPlan","getActiveMeal","find","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/innaglamazda/Documents/Inna/Education/Front-End/canshecode/React_JS/module-13-Final project-menu_planner/menu_planner_app/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport './App.css';\nimport MyList from './MyList';\nimport MyMealsAndIngridients from './MyMealsAndIngridients';\n\nfunction App() {\n\n\n// STEP 32\n// Прописываем часть шага localStorage в useState\n//И если у нас что то имеется в mealPlans не пустой массив то делаем JSON.parse\n// В противном случае у нас будет пустой массив\n\n  // STEP 7 \n  //  Нам нужно прописать состояние и прированием его к useState это у нас будет массив\n  const [mealPlans, setMealPlans] = useState(\n    localStorage.mealPlans ? JSON.parse(localStorage.mealPlans) : [])\n\n  // STEP 16\n  // Мы должны сделать ращницу между заметкой на котору мы нажали и при этом открывалась под нее форма\n  // которую мы можем редактировать\n  // Нам нужно новое состояние и приравниваем это к useState(false)\n  //Потому что мы хотим чтобы наша заметка изначально не была выбрана\n  const [selectedDay, setSelectedDay] = useState(false)\n\n\n//   STEP 31\n// Нам нужно научиться сохранять информацию через localStorage потому что нет бекенда\n// Нам понадобиться useEffect\n// И  унас будет такая логика что localStorage.setItem(это всегда исапользуется с localStorage)\n// Мы говорим что мы хотим обращать внимание именно на то меняется mealPlans or not\n// И мы хотим показывать в определенном формате JSON.stringify\n// То есть мы не только сохраняем мы отображаем информацию в определенном формате иначе не будет работать\n// И после этого должны привязать к mealPlans\n// Структоруа с использования localStorage всегда одна\nuseEffect(() => {\n  localStorage.setItem(\"mealPlans\", JSON.stringify(mealPlans));\n}, [mealPlans])\n\n  // STEP 6\n  // Задефайним addMeal\n  //И потом передаь этот пропс ребенку MyList\n\n  const addMeal = () => {\n    // STEP 8 \n    // Создаем обьект newMeal потому что у нас у каждой заметки по меню будут определенны характеристики\n    // например: title and etc.\n    const newMeal = {\n      title: \"Monday meal\",\n\n      //STEP 12\n      // Нам нужно удалять каждый день из списка не все сразу,  идля этого нам нужно знать ID\n      // Но мы не можем прописывать ID (1, 2, 3, 4) \n      //Но у нас у каждого эдемента будет свой айди\n      // поэтому часто используют библиотеку uuid https://www.npmjs.com/package/uuid\n      // для установки: npm i uuid\n      // функция: uuid();\n      // импортировать:import { v4 as uuid } from 'uuid';\n      //Для этого мы будем просто писать id: uuid() то есть вызывать эту функцию\n      id: uuid(),\n      mealForADay: \"\",\n      notes: \"\"\n    }\n\n    // STEP 9\n    // Мы должны передать этот обьект в новый компонент\n    // Но прежде чем передать вновый компонент мы должны прописать логику поменять состояние\n    // Что как только у нас будет нажата кнопка ADD мы меняем состояние\n    // Берем setMealPlans, создаем новый массив это юудет у нас newMeal\n    // Мы говорим добавь нам сюда нашу новую заметку и также покажи мне не убирай со страницы а добавь в общий массив все остальное\n    // Для этого испольщуем опиратор расширения\n    //Нам нужно чтобы при нажатии мы видели что мы добавили видели текст\n    //Нам нужно всю эту логику передать в компонент MyList\n    setMealPlans([newMeal, ...mealPlans])\n    console.log(newMeal)\n  }\n\n  // STEP 14\n  // Прописываем функцию\n  // Указываем параметр mealID\n  const deleteDay = (mealId) => {\n    //   Мы говорим что мы хотим поменять наше состояние через setMealPlans и использунм filter() method\n    //   Мы используем ID чтобы сравнивать ID с тем ID на который мы нажали и если он не одинаковый \n    //   ID удаляется то есть не попападает в новый массив который был создан через filter\n    setMealPlans(mealPlans.filter(({ id }) => id !== mealId))\n  }\n\n  // SETP 21\n  // Создаем новую const\n  const updatedDay = (myUpdatedMeal) => {\n    // Создаем новую const и это у нас будет новый массив\n    // Мы возьмем все наши заметки то есть mealPlans сделаем на нем метод Map()\n    const myUpdatedMeals = mealPlans.map((mealPlan) => {\n      // и мы будем смотреть чтобы id нашего mealPlan был таким же как id вот этой формы что у нас открыта\n      // и если они у нас абсолютно одинаковы то return myUpdatedMeal\n      // Если же нет то тогда покажи нам просто mealPlan\n      if (mealPlan.id === myUpdatedMeal.id) {\n        return myUpdatedMeal;\n      }\n      return mealPlan;\n\n    })\n\n    // STEP 22\n    // мы должны прописать setMealPlans и сказать что если если будут какие то изминение\n    // то нужно все менять и принимать во внимание\n    setMealPlans(myUpdatedMeals)\n\n  }\n\n// STEP 27\n// Создаем функцию которая будет проверять ID нашей заметки(формы) и ID того дня который выбран\n// Испольщуем метод find() и мы будем искать по ID\n// И помимо этого мы напишем что id нашей формы должен быть равен selectedDay\nconst getActiveMeal = () => {\n   return mealPlans.find(({id}) => id === selectedDay);\n}\n\n  return (\n\n    <div>\n      {/* STEP 1\n    Создаем 2 компонента\n    MyList\n    MyMealsAndIngridients */}\n\n      {/* STEP 5\n      Добавляем prop addMeal to MyList */}\n\n      {/* STEP 16 \n      Передаем selectedDay и setSelectedDay like props to MyList */}\n\n      {/* STEP 15\n      Передаем функцию deleteDay через props в MyList */}\n\n      {/* STEP 10\n      Добавляем новый prop и приравниваем его к mealPlans\n      и таким образом передаем его в новый компонент но мы хотим его не только передать но и туда что то добавлять\n      И менять состояние благодаря фцнкции setMealPlans которую мы прописали выше\n       */}\n      <MyList\n        mealPlans={mealPlans}\n        addMeal={addMeal}\n        deleteDay={deleteDay}\n        selectedDay={selectedDay}\n        setSelectedDay={setSelectedDay}\n      />\n\n      {/* STEP 23\n      Передаем updatedDay в  MyMealsAndIngridients component */}\n\n      {/* SETP 20\n      Передаем selectedDay prop ребенку MyMealsAndIngridients\n      То ксть один и тот же prop selectedDay мы испольщуем в 2х дочерних компонентах */}\n      <MyMealsAndIngridients selectedDay={getActiveMeal()} updatedDay={updatedDay} />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,EAAE,IAAIC,IAAI,QAAQ,MAAM;AACjC,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,qBAAqB,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAGf;EACA;EACA;EACA;;EAEE;EACA;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CACxCW,YAAY,CAACF,SAAS,GAAGG,IAAI,CAACC,KAAK,CAACF,YAAY,CAACF,SAAS,CAAC,GAAG,EAAE,CAAC;;EAEnE;EACA;EACA;EACA;EACA;EACA,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAGvD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAD,SAAS,CAAC,MAAM;IACdY,YAAY,CAACK,OAAO,CAAC,WAAW,EAAEJ,IAAI,CAACK,SAAS,CAACR,SAAS,CAAC,CAAC;EAC9D,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEb;EACA;EACA;;EAEA,MAAMS,OAAO,GAAGA,CAAA,KAAM;IACpB;IACA;IACA;IACA,MAAMC,OAAO,GAAG;MACdC,KAAK,EAAE,aAAa;MAEpB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAC,EAAE,EAAEnB,IAAI,CAAC,CAAC;MACVoB,WAAW,EAAE,EAAE;MACfC,KAAK,EAAE;IACT,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAb,YAAY,CAAC,CAACS,OAAO,EAAE,GAAGV,SAAS,CAAC,CAAC;IACrCe,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC;EACtB,CAAC;;EAED;EACA;EACA;EACA,MAAMO,SAAS,GAAIC,MAAM,IAAK;IAC5B;IACA;IACA;IACAjB,YAAY,CAACD,SAAS,CAACmB,MAAM,CAAC,CAAC;MAAEP;IAAG,CAAC,KAAKA,EAAE,KAAKM,MAAM,CAAC,CAAC;EAC3D,CAAC;;EAED;EACA;EACA,MAAME,UAAU,GAAIC,aAAa,IAAK;IACpC;IACA;IACA,MAAMC,cAAc,GAAGtB,SAAS,CAACuB,GAAG,CAAEC,QAAQ,IAAK;MACjD;MACA;MACA;MACA,IAAIA,QAAQ,CAACZ,EAAE,KAAKS,aAAa,CAACT,EAAE,EAAE;QACpC,OAAOS,aAAa;MACtB;MACA,OAAOG,QAAQ;IAEjB,CAAC,CAAC;;IAEF;IACA;IACA;IACAvB,YAAY,CAACqB,cAAc,CAAC;EAE9B,CAAC;;EAEH;EACA;EACA;EACA;EACA,MAAMG,aAAa,GAAGA,CAAA,KAAM;IACzB,OAAOzB,SAAS,CAAC0B,IAAI,CAAC,CAAC;MAACd;IAAE,CAAC,KAAKA,EAAE,KAAKP,WAAW,CAAC;EACtD,CAAC;EAEC,oBAEER,OAAA;IAAA8B,QAAA,gBAoBE9B,OAAA,CAACH,MAAM;MACLM,SAAS,EAAEA,SAAU;MACrBS,OAAO,EAAEA,OAAQ;MACjBQ,SAAS,EAAEA,SAAU;MACrBZ,WAAW,EAAEA,WAAY;MACzBC,cAAc,EAAEA;IAAe;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eAQFlC,OAAA,CAACF,qBAAqB;MAACU,WAAW,EAAEoB,aAAa,CAAC,CAAE;MAACL,UAAU,EAAEA;IAAW;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5E,CAAC;AAEV;AAAChC,EAAA,CAxJQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AA0JZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}